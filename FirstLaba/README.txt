Лабораторная работа №1: Сравнение работы алгоритмов

Задача: сравнить скорость работы различных алгоритмов

Вариант 1: сортировка массива целых чисел
Вариант 2: поиска подстроки в строке
Пользовательский интерфейс — командная строка. Программа работает в режиме запрос пользователя — действие. Предполагается, что пользователю не задают вопросов, а только сообщают о результате. Если нужен ввод пользователя, он может передать параметры для команды, просто введя их после команды через пробел. Пользователь может совершать ошибки при вводе команд и параметров. Если это произошло, нужно вежливо и доступно его уведомить.

Необходимо реализовать следующие команды:

help - выводит описание программы и возможные команды
iterations - устанавливаем количество повторений алгоритмов для вычисления среднего времени рабты.
Параметр для этой команды - количество итераций. Значение по умолчанию: 100
sequence - устанавливаем последовательность для тестирования.

Вариант 1: целые числа через пробел
Вариант 2: строка
test - запускает работу алгоритмов. Каждый алгоритм выполняется на последовательности sequence, iterations раз.
В результате выводится среднее время работы каждого алгоритма.

Вариант 1: без параметров
Вариант 2: параметр для этой команды - подстрока, которую нужно найти
Сессия работы программы может выглядеть примерно так:

  $ iterations 500
  Количество итераций:500
  $ sequence 1 2 3 4 5 67 8 9 34234 2 3 42 3 4 2 3 4 33
  Последовательность установлена
  $ test
  Итераций: 500, Размер массива: 18
  Шелл: 0.5 мс
  QuickSort: 0.6 мс
  Пузырёк: 12 мс
Указания

Методы сортировки передавайте в метод сравнения как делегаты
Обратите внимание на обработку ошибок ввода (отсутствие параметров, несоответствие типов и порч.)
Для реализации алгоритмов используйте результаты курсовой работы по курсу "Алгоритмы"
Обязательно используйте в сравнении стандартные c# методы для решения задачи

Вариант 1: метод Sort класса Array
Вариант 2: метод IndexOf класса String
Для измерения времени можно использовать, например, класс Stopwatch

Доп. задание

Добавить команду random, которая генерирует случайные данные массив или строку для тестирования (эту команду можно использовать вместо sequence) для того, чтобы задать поледовательность. Необязательный параметр для этой команды — длина массива или строки. По умолчанию он равен 1000.

Добавить возможность выполнять записанные сценарии работы. В файле work.txt некто записывает команд:

  iterations 1000
  sequence "Единственно, что может спасти смертельно раненного кота — это глоток бензина..."
  test зина
  
Мы передаем имя этого файла в нашу консольную программу как параметр:
  ConsoleApp.exe work.txt
  
Записанное в файле выполняется, как еcли бы мы вводили то, что там записано, в консоли.
Мы видим примерно следующее:
  Количество итераций: 1000
  Последовательность установлена
  Итераций: 1000. Размер строки: 80. Размер искомой строки: 4
  Стандартный: 0.5 мс
  Рабин-Карп: 0.6 мс
  Бойер-Мур: 12 мс
  
